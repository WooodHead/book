{"ast":null,"code":"var _jsxFileName = \"/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImageFile.tsx\";\nimport React, { useRef } from 'react'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond'; // Import FilePond styles\n\nimport 'filepond/dist/filepond.min.css'; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { API_BASE, CONTEXT } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename'; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginFileRename); // Our app\n\nvar ImageFile = function ImageFile(_ref) {\n  var onprocessfile = _ref.onprocessfile;\n  //const [files, setFiles] = useState<FilePondFile[]>([]);\n  var pond = useRef();\n\n  var _JSON$parse = JSON.parse(localStorage.getItem('auth')),\n      token = _JSON$parse.token;\n\n  var handleInit = function handleInit() {// console.log('FilePond instance has initialised', pond);\n    // pond.setOptions({\n    //     fileRenameFunction: (file:any) => {\n    //         return `my_new_name${file.extension}`;\n    //     }\n    // })\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    ref: pond //files={this.state.files}\n    ,\n    allowMultiple: false,\n    allowReorder: true,\n    \"accepted-file-types\": \"image/jpeg, image/png\",\n    maxFiles: 1,\n    server: {\n      url: \"\".concat(API_BASE).concat(CONTEXT, \"/upload\"),\n      headers: {\n        'x-nideshop-token': token,\n        'id': Date.now()\n      }\n    },\n    name: \"files\",\n    oninit: function oninit() {\n      return handleInit();\n    },\n    onprocessfile: onprocessfile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nexport default ImageFile;","map":{"version":3,"sources":["/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImageFile.tsx"],"names":["React","useRef","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","API_BASE","CONTEXT","FilePondPluginFileRename","ImageFile","onprocessfile","pond","JSON","parse","localStorage","getItem","token","handleInit","url","headers","Date","now"],"mappings":";AAAA,OAAOA,KAAP,IAA8BC,MAA9B,QAA4C,OAA5C,C,CAEA;;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,gBAAzC,C,CAEA;;AACA,OAAO,gCAAP,C,CAEA;AACA;;AACA,OAAOC,kCAAP,MAA+C,wCAA/C;AACA,OAAOC,0BAAP,MAAuC,+BAAvC;AACA,OAAO,sEAAP;AAEA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,YAAlC;AACA,OAAOC,wBAAP,MAAqC,6BAArC,C,CAEA;;AACAL,cAAc,CAACC,kCAAD,EAAqCC,0BAArC,EAAgEG,wBAAhE,CAAd,C,CAGA;;AACA,IAAMC,SAA8B,GAAG,SAAjCA,SAAiC,OAAqB;AAAA,MAAnBC,aAAmB,QAAnBA,aAAmB;AACxD;AACA,MAAMC,IAAI,GAAGV,MAAM,EAAnB;;AAFwD,oBAGtCW,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAHsC;AAAA,MAGhDC,KAHgD,eAGhDA,KAHgD;;AAIxD,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CACrB;AACA;AACA;AACA;AACA;AACA;AACH,GAPD;;AASA,SACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEN,IADT,CAEI;AAFJ;AAGI,IAAA,aAAa,EAAE,KAHnB;AAII,IAAA,YAAY,EAAE,IAJlB;AAKI,2BAAoB,uBALxB;AAMI,IAAA,QAAQ,EAAE,CANd;AAQI,IAAA,MAAM,EAAE;AACJO,MAAAA,GAAG,YAAKZ,QAAL,SAAgBC,OAAhB,YADC;AAEJY,MAAAA,OAAO,EAAE;AACL,4BAAoBH,KADf;AAEL,cAAOI,IAAI,CAACC,GAAL;AAFF;AAFL,KARZ;AAeI,IAAA,IAAI,EAAC,OAfT;AAgBI,IAAA,MAAM,EAAE;AAAA,aAAMJ,UAAU,EAAhB;AAAA,KAhBZ;AAkBI,IAAA,aAAa,EAAEP,aAlBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAwBH,CArCD;;AAuCA,eAAeD,SAAf","sourcesContent":["import React, { useState, FC, useRef } from 'react';\n\n// Import React FilePond\nimport { FilePond, registerPlugin } from 'react-filepond';\n\n// Import FilePond styles\nimport 'filepond/dist/filepond.min.css';\n\n// Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { FileUploadProps } from '../types';\nimport { API_BASE, CONTEXT } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n\n// Register the plugins\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginFileRename);\n\n\n// Our app\nconst ImageFile: FC<FileUploadProps> = ({onprocessfile}) => {\n    //const [files, setFiles] = useState<FilePondFile[]>([]);\n    const pond = useRef<any>();\n    const { token } = JSON.parse(localStorage.getItem('auth')!);\n    const handleInit = () => {\n        // console.log('FilePond instance has initialised', pond);\n        // pond.setOptions({\n        //     fileRenameFunction: (file:any) => {\n        //         return `my_new_name${file.extension}`;\n        //     }\n        // })\n    };\n    \n    return (\n        <div className=\"App\">\n            <FilePond               \n                ref={pond}\n                //files={this.state.files}\n                allowMultiple={false}\n                allowReorder={true}\n                accepted-file-types=\"image/jpeg, image/png\"\n                maxFiles={1}\n                \n                server={{\n                    url: `${API_BASE}${CONTEXT}/upload`,\n                    headers: {\n                        'x-nideshop-token': token,\n                        'id' : Date.now()\n                    }\n                }}\n                name=\"files\"\n                oninit={() => handleInit()}\n                \n                onprocessfile={onprocessfile}\n            />\n        </div>\n    );\n};\n\nexport default ImageFile;\n"]},"metadata":{},"sourceType":"module"}