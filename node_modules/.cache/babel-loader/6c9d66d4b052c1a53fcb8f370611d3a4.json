{"ast":null,"code":"import _slicedToArray from \"/Users/scott/code/eshop/react-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImagePicker.tsx\";\nimport React, { useState, useRef } from 'react'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond'; // Import FilePond styles\n\nimport 'filepond/dist/filepond.min.css'; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { API_BASE, STATIC_RESOURCE_FILE_PATH, CONTEXT } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\nimport { useInput } from 'react-admin';\nimport PropTypes from 'prop-types'; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginFileRename); // Our app\n\nvar ImagePicker = function ImagePicker(props) {\n  console.log('props', props);\n\n  var _useState = useState(Date.now().toString() + '.jpg'),\n      _useState2 = _slicedToArray(_useState, 2),\n      filename = _useState2[0],\n      setFilename = _useState2[1];\n\n  var source = props.source,\n      imageName = props.imageName;\n\n  var _useInput = useInput({\n    source: source\n  }),\n      input = _useInput.input,\n      meta = _useInput.meta;\n\n  var pond = useRef(null);\n\n  var _JSON$parse = JSON.parse(localStorage.getItem('auth')),\n      token = _JSON$parse.token;\n\n  var files = null;\n\n  if (imageName) {\n    files = [{\n      source: \"\".concat(API_BASE, \"/\").concat(STATIC_RESOURCE_FILE_PATH, \"/\").concat(imageName),\n      options: {\n        type: 'local'\n      }\n    }];\n  }\n\n  var handleInit = function handleInit() {\n    //pond.addFile('1605603793591.jpg');\n    pond.current.addFiles(files);\n    console.log(\"FilePond instance has initialised\", pond);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    ref: pond //files={this.state.files}\n    ,\n    allowMultiple: false,\n    allowReorder: true //files={files}\n    ,\n    \"accepted-file-types\": \"image/jpeg, image/png\",\n    maxFiles: 1,\n    labelIdle: \"\\u4ECE\\u684C\\u9762\\u62D6\\u62C9\\u6587\\u4EF6\\u6216 <span class=\\\"filepond--label-action\\\">\\u6D4F\\u89C8\\u6587\\u4EF6</span>\",\n    server: {\n      url: \"\".concat(API_BASE).concat(CONTEXT, \"/upload\"),\n      headers: {\n        'x-nideshop-token': token,\n        filename: filename.toString()\n      },\n      restore: '?id=1605604900167.jpg',\n      load: function load(source, _load, error, progress, abort, headers) {\n        console.log('source', source);\n        var myRequest = new Request(source);\n        fetch(myRequest).then(function (response) {\n          response.blob().then(function (myBlob) {\n            _load(myBlob);\n          });\n        });\n      }\n    },\n    name: \"files\",\n    oninit: function oninit() {\n      return handleInit();\n    },\n    onaddfile: function onaddfile(error, file) {\n      setFilename(Date.now().toString() + '.jpg');\n    },\n    onprocessfile: function onprocessfile(error, file) {\n      if (error) {\n        console.log('Oh no');\n        return;\n      } //onprocessend(filename);\n\n\n      input.onChange(filename);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nImagePicker.propTypes = {\n  input: PropTypes.object,\n  imageName: PropTypes.string,\n  meta: PropTypes.object,\n  source: PropTypes.string\n};\nexport default ImagePicker;","map":{"version":3,"sources":["/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImagePicker.tsx"],"names":["React","useState","useRef","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","API_BASE","STATIC_RESOURCE_FILE_PATH","CONTEXT","FilePondPluginFileRename","useInput","PropTypes","ImagePicker","props","console","log","Date","now","toString","filename","setFilename","source","imageName","input","meta","pond","JSON","parse","localStorage","getItem","token","files","options","type","handleInit","current","addFiles","url","headers","restore","load","error","progress","abort","myRequest","Request","fetch","then","response","blob","myBlob","file","onChange","propTypes","object","string"],"mappings":"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","sourcesContent":["import React, { useState, FC, useRef } from 'react';\n\n// Import React FilePond\nimport { FilePond, registerPlugin } from 'react-filepond';\n\n// Import FilePond styles\nimport 'filepond/dist/filepond.min.css';\n\n// Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { FileUploadProps } from '../types';\nimport { API_BASE, STATIC_RESOURCE_FILE_PATH, CONTEXT } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\nimport { FilePondErrorDescription, FilePondFile } from 'filepond';\nimport { useInput } from 'react-admin';\nimport PropTypes from 'prop-types';\n// Register the plugins\nregisterPlugin(\n    FilePondPluginImageExifOrientation,\n    FilePondPluginImagePreview,\n    FilePondPluginFileRename\n);\n\n// Our app\nconst ImagePicker = (props:any) => {\n    console.log('props', props)\n    const [filename, setFilename] = useState<string>(\n        Date.now().toString() + '.jpg'\n    );\n    const {source,imageName} = props;\n    const { input, meta } = useInput({ source });\n    const pond = useRef<any>(null);\n    const { token } = JSON.parse(localStorage.getItem('auth')!);\n    let files:any = null;\n    if (imageName) {\n        files = [\n            {\n                source: `${API_BASE}/${STATIC_RESOURCE_FILE_PATH}/${imageName}`,\n                options: {\n                    type: 'local',\n                },\n            },\n        ];\n    }\n\n    const handleInit = () => {\n        //pond.addFile('1605603793591.jpg');\n        pond.current.addFiles(files);\n        console.log(\"FilePond instance has initialised\", pond);\n    };\n\n    return (\n        <div className=\"App\">\n            <FilePond\n                ref={pond}\n                //files={this.state.files}\n                allowMultiple={false}\n                allowReorder={true}\n                //files={files}\n                accepted-file-types=\"image/jpeg, image/png\"\n                maxFiles={1}\n                labelIdle='从桌面拖拉文件或 <span class=\"filepond--label-action\">浏览文件</span>'\n                server={{\n                    url: `${API_BASE}${CONTEXT}/upload`,\n                    headers: {\n                        'x-nideshop-token': token,\n                        filename: filename.toString(),\n                    },\n                    restore: '?id=1605604900167.jpg',\n                    load: (source, load, error, progress, abort, headers) => {\n                        console.log('source', source)\n                        var myRequest = new Request(source);\n                        fetch(myRequest).then(function (response) {\n                            response.blob().then(function (myBlob) {\n                                load(myBlob);\n                            });\n                        });\n                    },\n                }}\n                name=\"files\"\n                oninit={() => handleInit()}\n                onaddfile={(\n                    error: FilePondErrorDescription | null,\n                    file: FilePondFile\n                ) => {\n                    setFilename(Date.now().toString() + '.jpg');\n                }}\n                onprocessfile={(\n                    error: FilePondErrorDescription | null,\n                    file: FilePondFile\n                ) => {\n                    if (error) {\n                        console.log('Oh no');\n                        return;\n                    }\n                    //onprocessend(filename);\n                    input.onChange(filename);\n                }}\n            />\n        </div>\n    );\n};\n\nImagePicker.propTypes = {\n    input: PropTypes.object,\n    imageName: PropTypes.string,\n    meta: PropTypes.object,\n   \n    source: PropTypes.string,\n    \n  };\n\nexport default ImagePicker;\n"]},"metadata":{},"sourceType":"module"}