{"ast":null,"code":"import _slicedToArray from \"/Users/scott/code/eshop/react-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/scott/code/eshop/react-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/scott/code/eshop/react-admin/examples/demo/src/orders/OrderList.tsx\";\nimport * as React from 'react';\nimport { Fragment, useCallback, useEffect, useState } from 'react';\nimport { AutocompleteInput // BooleanField,\n, Datagrid, DateField, DateInput, Filter, List, ListContextProvider, NullableBooleanInput // NumberField,\n, ReferenceInput // ReferenceField,\n, SearchInput, TextField, TextInput, useGetList, useListContext } from 'react-admin';\nimport { useMediaQuery, Divider, Tabs, Tab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NbItemsField from './NbItemsField';\nimport CustomerReferenceField from '../visitors/CustomerReferenceField';\nimport AddressField from '../visitors/AddressField';\nimport MobileGrid from './MobileGrid';\n\nvar OrderFilter = function OrderFilter(props) {\n  return React.createElement(Filter, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(SearchInput, {\n    source: \"q\",\n    alwaysOn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(ReferenceInput, {\n    source: \"customer_id\",\n    reference: \"customers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(AutocompleteInput, {\n    optionText: function optionText(choice) {\n      return choice.id // the empty choice is { id: '' }\n      ? \"\".concat(choice.first_name, \" \").concat(choice.last_name) : '';\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(DateInput, {\n    source: \"date_gte\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(DateInput, {\n    source: \"date_lte\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(TextInput, {\n    source: \"total_gte\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(NullableBooleanInput, {\n    source: \"returned\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nvar useDatagridStyles = makeStyles({\n  total: {\n    fontWeight: 'bold'\n  }\n});\nvar tabs = [{\n  id: 'ordered',\n  name: '新订单'\n}, {\n  id: 'delivered',\n  name: '已发货'\n}, {\n  id: 'cancelled',\n  name: '已取消'\n}];\n\nvar useGetTotals = function useGetTotals(filterValues) {\n  var _useGetList = useGetList('commands', {\n    perPage: 1,\n    page: 1\n  }, {\n    field: 'id',\n    order: 'ASC'\n  }, _objectSpread({}, filterValues, {\n    status: 'ordered'\n  })),\n      totalOrdered = _useGetList.total;\n\n  var _useGetList2 = useGetList('commands', {\n    perPage: 1,\n    page: 1\n  }, {\n    field: 'id',\n    order: 'ASC'\n  }, _objectSpread({}, filterValues, {\n    status: 'delivered'\n  })),\n      totalDelivered = _useGetList2.total;\n\n  var _useGetList3 = useGetList('commands', {\n    perPage: 1,\n    page: 1\n  }, {\n    field: 'id',\n    order: 'ASC'\n  }, _objectSpread({}, filterValues, {\n    status: 'cancelled'\n  })),\n      totalCancelled = _useGetList3.total;\n\n  return {\n    ordered: totalOrdered,\n    delivered: totalDelivered,\n    cancelled: totalCancelled\n  };\n};\n\nvar TabbedDatagrid = function TabbedDatagrid(props) {\n  var listContext = useListContext();\n  var ids = listContext.ids,\n      filterValues = listContext.filterValues,\n      setFilters = listContext.setFilters,\n      displayedFilters = listContext.displayedFilters;\n  var classes = useDatagridStyles();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      ordered = _useState2[0],\n      setOrdered = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      delivered = _useState4[0],\n      setDelivered = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cancelled = _useState6[0],\n      setCancelled = _useState6[1];\n\n  var totals = useGetTotals(filterValues);\n  useEffect(function () {\n    if (ids && ids !== filterValues.status) {\n      switch (filterValues.status) {\n        case 'ordered':\n          setOrdered(ids);\n          break;\n\n        case 'delivered':\n          setDelivered(ids);\n          break;\n\n        case 'cancelled':\n          setCancelled(ids);\n          break;\n      }\n    }\n  }, [ids, filterValues.status]);\n  var handleChange = useCallback(function (event, value) {\n    setFilters && setFilters(_objectSpread({}, filterValues, {\n      status: value\n    }), displayedFilters);\n  }, [displayedFilters, filterValues, setFilters]);\n  var selectedIds = filterValues.status === 'ordered' ? ordered : filterValues.status === 'delivered' ? delivered : cancelled;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    variant: \"fullWidth\",\n    centered: true,\n    value: filterValues.status,\n    indicatorColor: \"primary\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, tabs.map(function (choice) {\n    return React.createElement(Tab, {\n      key: choice.id,\n      label: totals[choice.name] ? \"\".concat(choice.name, \" (\").concat(totals[choice.name], \")\") : choice.name,\n      value: choice.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    });\n  })), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), isXSmall ? React.createElement(ListContextProvider, {\n    value: _objectSpread({}, listContext, {\n      ids: selectedIds\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(MobileGrid, Object.assign({}, props, {\n    ids: selectedIds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, filterValues.status === 'ordered' && React.createElement(ListContextProvider, {\n    value: _objectSpread({}, listContext, {\n      ids: ordered\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Datagrid, Object.assign({}, props, {\n    optimized: true,\n    rowClick: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    source: \"order_sn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(DateField, {\n    source: \"add_time\",\n    showTime: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(CustomerReferenceField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), React.createElement(AddressField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(NbItemsField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }))), filterValues.status === 'delivered' && React.createElement(ListContextProvider, {\n    value: _objectSpread({}, listContext, {\n      ids: delivered\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Datagrid, Object.assign({}, props, {\n    rowClick: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    source: \"order_sn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(DateField, {\n    source: \"add_time\",\n    showTime: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(CustomerReferenceField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), React.createElement(AddressField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), React.createElement(NbItemsField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }))), filterValues.status === 'cancelled' && React.createElement(ListContextProvider, {\n    value: _objectSpread({}, listContext, {\n      ids: cancelled\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Datagrid, Object.assign({}, props, {\n    rowClick: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    source: \"order_sn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }), React.createElement(DateField, {\n    source: \"add_time\",\n    showTime: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }), React.createElement(CustomerReferenceField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(AddressField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), React.createElement(NbItemsField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  })))));\n};\n\nvar OrderList = function OrderList(props) {\n  return React.createElement(List, Object.assign({}, props, {\n    filterDefaultValues: {\n      status: 'ordered'\n    },\n    sort: {\n      field: 'add_time',\n      order: 'DESC'\n    },\n    perPage: 25,\n    filters: React.createElement(OrderFilter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), React.createElement(TabbedDatagrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }));\n};\n\nexport default OrderList;","map":{"version":3,"sources":["/Users/scott/code/eshop/react-admin/examples/demo/src/orders/OrderList.tsx"],"names":["React","Fragment","useCallback","useEffect","useState","AutocompleteInput","Datagrid","DateField","DateInput","Filter","List","ListContextProvider","NullableBooleanInput","ReferenceInput","SearchInput","TextField","TextInput","useGetList","useListContext","useMediaQuery","Divider","Tabs","Tab","makeStyles","NbItemsField","CustomerReferenceField","AddressField","MobileGrid","OrderFilter","props","choice","id","first_name","last_name","useDatagridStyles","total","fontWeight","tabs","name","useGetTotals","filterValues","perPage","page","field","order","status","totalOrdered","totalDelivered","totalCancelled","ordered","delivered","cancelled","TabbedDatagrid","listContext","ids","setFilters","displayedFilters","classes","isXSmall","theme","breakpoints","down","setOrdered","setDelivered","setCancelled","totals","handleChange","event","value","selectedIds","map","OrderList"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FC, Fragment, useCallback, useEffect, useState } from 'react';\nimport {\n    AutocompleteInput,\n    // BooleanField,\n    Datagrid,\n    DatagridProps,\n    DateField,\n    DateInput,\n    Filter,\n    FilterProps,\n    Identifier,\n    List,\n    ListContextProvider,\n    ListProps,\n    NullableBooleanInput,\n    // NumberField,\n    ReferenceInput,\n    // ReferenceField,\n    SearchInput,\n    TextField,\n    TextInput,\n    useGetList,\n    useListContext,\n} from 'react-admin';\nimport { useMediaQuery, Divider, Tabs, Tab, Theme } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport NbItemsField from './NbItemsField';\nimport CustomerReferenceField from '../visitors/CustomerReferenceField';\nimport AddressField from '../visitors/AddressField';\nimport MobileGrid from './MobileGrid';\nimport { Customer } from '../types';\n\nconst OrderFilter: FC<Omit<FilterProps, 'children'>> = props => (\n    <Filter {...props}>\n        <SearchInput source=\"q\" alwaysOn />\n        <ReferenceInput source=\"customer_id\" reference=\"customers\">\n            <AutocompleteInput\n                optionText={(choice: Customer) =>\n                    choice.id // the empty choice is { id: '' }\n                        ? `${choice.first_name} ${choice.last_name}`\n                        : ''\n                }\n            />\n        </ReferenceInput>\n        <DateInput source=\"date_gte\" />\n        <DateInput source=\"date_lte\" />\n        <TextInput source=\"total_gte\" />\n        <NullableBooleanInput source=\"returned\" />\n    </Filter>\n);\n\nconst useDatagridStyles = makeStyles({\n    total: { fontWeight: 'bold' },\n});\n\nconst tabs = [\n    { id: 'ordered', name: '新订单' },\n    { id: 'delivered', name: '已发货' },\n    { id: 'cancelled', name: '已取消' },\n];\n\ninterface TabbedDatagridProps extends DatagridProps {}\n\nconst useGetTotals = (filterValues: any) => {\n    const { total: totalOrdered } = useGetList(\n        'commands',\n        { perPage: 1, page: 1 },\n        { field: 'id', order: 'ASC' },\n        { ...filterValues, status: 'ordered' }\n    );\n    const { total: totalDelivered } = useGetList(\n        'commands',\n        { perPage: 1, page: 1 },\n        { field: 'id', order: 'ASC' },\n        { ...filterValues, status: 'delivered' }\n    );\n    const { total: totalCancelled } = useGetList(\n        'commands',\n        { perPage: 1, page: 1 },\n        { field: 'id', order: 'ASC' },\n        { ...filterValues, status: 'cancelled' }\n    );\n\n    return {\n        ordered: totalOrdered,\n        delivered: totalDelivered,\n        cancelled: totalCancelled,\n    };\n};\n\nconst TabbedDatagrid: FC<TabbedDatagridProps> = props => {\n    const listContext = useListContext();\n    const { ids, filterValues, setFilters, displayedFilters } = listContext;\n    const classes = useDatagridStyles();\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('xs')\n    );\n    const [ordered, setOrdered] = useState<Identifier[]>([] as Identifier[]);\n    const [delivered, setDelivered] = useState<Identifier[]>(\n        [] as Identifier[]\n    );\n    const [cancelled, setCancelled] = useState<Identifier[]>(\n        [] as Identifier[]\n    );\n    const totals = useGetTotals(filterValues) as any;\n\n    useEffect(() => {\n        if (ids && ids !== filterValues.status) {\n            switch (filterValues.status) {\n                case 'ordered':\n                    setOrdered(ids);\n                    break;\n                case 'delivered':\n                    setDelivered(ids);\n                    break;\n                case 'cancelled':\n                    setCancelled(ids);\n                    break;\n            }\n        }\n    }, [ids, filterValues.status]);\n\n    const handleChange = useCallback(\n        (event: React.ChangeEvent<{}>, value: any) => {\n            setFilters &&\n                setFilters(\n                    { ...filterValues, status: value },\n                    displayedFilters\n                );\n        },\n        [displayedFilters, filterValues, setFilters]\n    );\n\n    const selectedIds =\n        filterValues.status === 'ordered'\n            ? ordered\n            : filterValues.status === 'delivered'\n            ? delivered\n            : cancelled;\n\n    return (\n        <Fragment>\n            <Tabs\n                variant=\"fullWidth\"\n                centered\n                value={filterValues.status}\n                indicatorColor=\"primary\"\n                onChange={handleChange}\n            >\n                {tabs.map(choice => (\n                    <Tab\n                        key={choice.id}\n                        label={\n                            totals[choice.name]\n                                ? `${choice.name} (${totals[choice.name]})`\n                                : choice.name\n                        }\n                        value={choice.id}\n                    />\n                ))}\n            </Tabs>\n            <Divider />\n            {isXSmall ? (\n                <ListContextProvider\n                    value={{ ...listContext, ids: selectedIds }}\n                >\n                    <MobileGrid {...props} ids={selectedIds} />\n                </ListContextProvider>\n            ) : (\n                <div>\n                    {filterValues.status === 'ordered' && (\n                        <ListContextProvider\n                            value={{ ...listContext, ids: ordered }}\n                        >\n                            <Datagrid {...props} optimized rowClick=\"edit\">\n                                <TextField source=\"order_sn\" />\n                                <DateField\n                                    source=\"add_time\"\n                                    showTime\n                                    \n                                />\n\n                                <CustomerReferenceField />\n\n                                <AddressField />\n                                <NbItemsField />\n                               \n                            </Datagrid>\n                        </ListContextProvider>\n                    )}\n                    {filterValues.status === 'delivered' && (\n                        <ListContextProvider\n                            value={{ ...listContext, ids: delivered }}\n                        >\n                            <Datagrid {...props} rowClick=\"edit\">\n                                <TextField source=\"order_sn\" />\n                                <DateField source=\"add_time\" showTime />\n                                \n                                <CustomerReferenceField />\n                                <AddressField />\n                                <NbItemsField />\n                            </Datagrid>\n                        </ListContextProvider>\n                    )}\n                    {filterValues.status === 'cancelled' && (\n                        <ListContextProvider\n                            value={{ ...listContext, ids: cancelled }}\n                        >\n                            <Datagrid {...props} rowClick=\"edit\">\n                                <TextField source=\"order_sn\"  />\n                                <DateField source=\"add_time\" showTime />\n                                <CustomerReferenceField />\n                               \n                                <AddressField />\n                                <NbItemsField />\n                            </Datagrid>\n                        </ListContextProvider>\n                    )}\n                </div>\n            )}\n        </Fragment>\n    );\n}; \n\nconst OrderList: FC<ListProps> = props => (\n    <List\n        {...props}\n        filterDefaultValues={{ status: 'ordered' }}\n        sort={{ field: 'add_time', order: 'DESC' }}\n        perPage={25}\n        filters={<OrderFilter />}\n    >\n        <TabbedDatagrid />\n    </List>\n);\n\nexport default OrderList;\n"]},"metadata":{},"sourceType":"module"}