{"ast":null,"code":"import _slicedToArray from \"/Users/scott/code/eshop/react-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImageFile.tsx\";\nimport React, { useState, useRef } from 'react'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond'; // Import FilePond styles\n\nimport 'filepond/dist/filepond.min.css'; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { API_BASE, STATIC_RESOURCE_FILE_PATH } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n// Register the plugins\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginFileRename); // Our app\n\nvar ImageFile = function ImageFile(_ref) {\n  var imageName = _ref.imageName,\n      onprocessend = _ref.onprocessend;\n\n  var _useState = useState(Date.now().toString() + '.jpg'),\n      _useState2 = _slicedToArray(_useState, 2),\n      filename = _useState2[0],\n      setFilename = _useState2[1];\n\n  var pond = useRef();\n\n  var _JSON$parse = JSON.parse(localStorage.getItem('auth')),\n      token = _JSON$parse.token;\n\n  var handleInit = function handleInit() {//pond.addFile('1605603793591.jpg');\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    ref: pond //files={this.state.files}\n    ,\n    allowMultiple: false,\n    allowReorder: true,\n    files: [{\n      source: \"\".concat(API_BASE, \"/\").concat(STATIC_RESOURCE_FILE_PATH, \"/\").concat(imageName),\n      options: {\n        type: 'local'\n      }\n    }],\n    \"accepted-file-types\": \"image/jpeg, image/png\",\n    maxFiles: 1,\n    labelIdle: \"\\u4ECE\\u684C\\u9762\\u62D6\\u62C9\\u6587\\u4EF6\\u6216 <span class=\\\"filepond--label-action\\\">\\u6D4F\\u89C8\\u6587\\u4EF6</span>\",\n    server: {\n      url: \"\".concat(API_BASE).concat(CONTEXT, \"/upload\"),\n      headers: {\n        'x-nideshop-token': token,\n        filename: filename.toString()\n      },\n      restore: '?id=1605604900167.jpg',\n      load: function load(source, _load, error, progress, abort, headers) {\n        var myRequest = new Request(source);\n        fetch(myRequest).then(function (response) {\n          response.blob().then(function (myBlob) {\n            _load(myBlob);\n          });\n        });\n      }\n    },\n    name: \"files\",\n    oninit: function oninit() {\n      return handleInit();\n    },\n    onaddfile: function onaddfile(error, file) {\n      setFilename(Date.now().toString() + '.jpg');\n    },\n    onprocessfile: function onprocessfile(error, file) {\n      if (error) {\n        console.log('Oh no');\n        return;\n      }\n\n      onprocessend(filename);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n};\n\nexport default ImageFile;","map":{"version":3,"sources":["/Users/scott/code/eshop/react-admin/examples/demo/src/products/ImageFile.tsx"],"names":["React","useState","useRef","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","API_BASE","STATIC_RESOURCE_FILE_PATH","FilePondPluginFileRename","ImageFile","imageName","onprocessend","Date","now","toString","filename","setFilename","pond","JSON","parse","localStorage","getItem","token","handleInit","source","options","type","url","CONTEXT","headers","restore","load","error","progress","abort","myRequest","Request","fetch","then","response","blob","myBlob","file","console","log"],"mappings":"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","sourcesContent":["import React, { useState, FC, useRef } from 'react';\n\n// Import React FilePond\nimport { FilePond, registerPlugin } from 'react-filepond';\n\n// Import FilePond styles\nimport 'filepond/dist/filepond.min.css';\n\n// Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { FileUploadProps } from '../types';\nimport { API_BASE, STATIC_RESOURCE_FILE_PATH } from '../APIUrls';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\nimport { FilePondErrorDescription, FilePondFile } from 'filepond';\n\n// Register the plugins\nregisterPlugin(\n    FilePondPluginImageExifOrientation,\n    FilePondPluginImagePreview,\n    FilePondPluginFileRename\n);\n\n// Our app\nconst ImageFile: FC<FileUploadProps> = ({ imageName, onprocessend }) => {\n    const [filename, setFilename] = useState<string>(\n        Date.now().toString() + '.jpg'\n    );\n    const pond = useRef<any>();\n    const { token } = JSON.parse(localStorage.getItem('auth')!);\n\n    const handleInit = () => {\n        //pond.addFile('1605603793591.jpg');\n    };\n\n    return (\n        <div className=\"App\">\n            <FilePond\n                ref={pond}\n                //files={this.state.files}\n                allowMultiple={false}\n                allowReorder={true}\n                files={[\n                    {\n                        source:\n                            `${API_BASE}/${STATIC_RESOURCE_FILE_PATH}/${imageName}`,\n                        options: {\n                            type: 'local',\n                        },\n                    },\n                ]}\n                accepted-file-types=\"image/jpeg, image/png\"\n                maxFiles={1}\n                labelIdle='从桌面拖拉文件或 <span class=\"filepond--label-action\">浏览文件</span>'\n                server={{\n                    url: `${API_BASE}${CONTEXT}/upload`,\n                    headers: {\n                        'x-nideshop-token': token,\n                        filename: filename.toString(),\n                    },\n                    restore: '?id=1605604900167.jpg',\n                    load: (source, load, error, progress, abort, headers) => {\n                        var myRequest = new Request(source);\n                        fetch(myRequest).then(function(response) {\n                          response.blob().then(function(myBlob) {\n                            load(myBlob);\n                          });\n                        });         \n                    },\n                }}\n                name=\"files\"\n                oninit={() => handleInit()}\n                onaddfile={(\n                    error: FilePondErrorDescription | null,\n                    file: FilePondFile\n                ) => {\n                    setFilename(Date.now().toString() + '.jpg');\n                }}\n                onprocessfile={(\n                    error: FilePondErrorDescription | null,\n                    file: FilePondFile\n                ) => {\n                    if (error) {\n                        console.log('Oh no');\n                        return;\n                    }\n                    onprocessend(filename);\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ImageFile;\n"]},"metadata":{},"sourceType":"module"}