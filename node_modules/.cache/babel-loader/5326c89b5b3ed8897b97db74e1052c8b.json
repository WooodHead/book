{"ast":null,"code":"/*!\n * FilePondPluginFileRename 1.1.6\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileRename = factory());\n})(this, function () {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        renameFile = utils.renameFile,\n        isFile = utils.isFile,\n        getExtensionFromFilename = utils.getExtensionFromFilename,\n        getFilenameWithoutExtension = utils.getFilenameWithoutExtension; // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n\n    addFilter('LOAD_FILE', function (file, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function (resolve, reject) {\n        // reject\n        var allowFileRename = query('GET_ALLOW_FILE_RENAME');\n        var renameFunction = query('GET_FILE_RENAME_FUNCTION');\n\n        if (!isFile(file) || !allowFileRename || !renameFunction) {\n          resolve(file);\n          return;\n        } // can either return a name or a promise\n\n\n        var newFilename = renameFunction({\n          name: file.name,\n          basename: getFilenameWithoutExtension(file.name),\n          extension: '.'.concat(getExtensionFromFilename(file.name))\n        }); // renames the file and resolves\n\n        var rename = function rename(name) {\n          resolve(renameFile(file, name));\n        }; // has returned new filename immidiately\n\n\n        if (typeof newFilename === 'string') {\n          rename(newFilename);\n          return;\n        } // is promise\n\n\n        newFilename.then(rename);\n      });\n    });\n    return {\n      options: {\n        // Enable or disable file renaming\n        allowFileRename: [true, Type.BOOLEAN],\n        // Rename function to run for this\n        fileRenameFunction: [null, Type.FUNCTION]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["/Users/scott/code/eshop/react-admin/node_modules/filepond-plugin-file-rename/dist/filepond-plugin-file-rename.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginFileRename","plugin","_ref","addFilter","utils","Type","renameFile","isFile","getExtensionFromFilename","getFilenameWithoutExtension","file","_ref2","query","Promise","resolve","reject","allowFileRename","renameFunction","newFilename","name","basename","extension","concat","rename","then","options","BOOLEAN","fileRenameFunction","FUNCTION","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/*!\n * FilePondPluginFileRename 1.1.6\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? (module.exports = factory())\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : ((global = global || self),\n      (global.FilePondPluginFileRename = factory()));\n})(this, function() {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n\n    // get quick reference to Type utils\n    var Type = utils.Type,\n      renameFile = utils.renameFile,\n      isFile = utils.isFile,\n      getExtensionFromFilename = utils.getExtensionFromFilename,\n      getFilenameWithoutExtension = utils.getFilenameWithoutExtension;\n\n    // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n    addFilter('LOAD_FILE', function(file, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function(resolve, reject) {\n        // reject\n        var allowFileRename = query('GET_ALLOW_FILE_RENAME');\n        var renameFunction = query('GET_FILE_RENAME_FUNCTION');\n        if (!isFile(file) || !allowFileRename || !renameFunction) {\n          resolve(file);\n          return;\n        }\n\n        // can either return a name or a promise\n        var newFilename = renameFunction({\n          name: file.name,\n          basename: getFilenameWithoutExtension(file.name),\n          extension: '.'.concat(getExtensionFromFilename(file.name))\n        });\n\n        // renames the file and resolves\n        var rename = function rename(name) {\n          resolve(renameFile(file, name));\n        };\n\n        // has returned new filename immidiately\n        if (typeof newFilename === 'string') {\n          rename(newFilename);\n          return;\n        }\n\n        // is promise\n        newFilename.then(rename);\n      });\n    });\n\n    return {\n      options: {\n        // Enable or disable file renaming\n        allowFileRename: [true, Type.BOOLEAN],\n\n        // Rename function to run for this\n        fileRenameFunction: [null, Type.FUNCTION]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}